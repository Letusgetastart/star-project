{"version":3,"sources":["Star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","game","default","getPlayerDistance","playerPos","player","getPosition","dist","node","position","sub","mag","onPick","spawnNewStar","gainScore","destroy","start","update","dt","opacityRatio","timer","starDuration","minOpacity","opacity","Math","floor"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,oBAAW,CADH;AAERC,cAAK;AACDC,qBAAQ;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBK,SAFG,EAHP;;AAyBLC,qBAzBK,+BAyBc;AACf,YAAIC,YAAU,KAAKH,IAAL,CAAUI,MAAV,CAAiBC,WAAjB,EAAd;;AAEA,YAAIC,OAAK,KAAKC,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuBN,SAAvB,EAAkCO,GAAlC,EAAT;;AAEA,eAAOJ,IAAP;AACH,KA/BI;AAiCLK,UAjCK,oBAiCG;AACJ,aAAKX,IAAL,CAAUY,YAAV;;AAEA,aAAKZ,IAAL,CAAUa,SAAV;;AAEA,aAAKN,IAAL,CAAUO,OAAV;AACH,KAvCI;;AAwCL;;AAEA;;AAEAC,SA5CK,mBA4CI,CAER,CA9CI;AAgDLC,UAhDK,kBAgDGC,EAhDH,EAgDO;AACR,YAAIC,eAAa,IAAE,KAAKlB,IAAL,CAAUmB,KAAV,GAAgB,KAAKnB,IAAL,CAAUoB,YAA7C;AACA,YAAIC,aAAW,EAAf;AACA,aAAKd,IAAL,CAAUe,OAAV,GAAkBD,aAAWE,KAAKC,KAAL,CAAWN,gBAAc,MAAIG,UAAlB,CAAX,CAA7B;;AAEA,YAAG,KAAKnB,iBAAL,KAAyB,KAAKH,UAAjC,EAA4C;AACxC,iBAAKY,MAAL;AACA;AACH;AACJ;AAzDI,CAAT","file":"Star.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        pickRadius:0,\r\n        game:{\r\n            default:null,\r\n        }\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    getPlayerDistance(){\r\n        var playerPos=this.game.player.getPosition();\r\n\r\n        var dist=this.node.position.sub(playerPos).mag();\r\n\r\n        return dist;\r\n    },\r\n\r\n    onPick(){\r\n        this.game.spawnNewStar();\r\n\r\n        this.game.gainScore();\r\n        \r\n        this.node.destroy();\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        var opacityRatio=1-this.game.timer/this.game.starDuration;\r\n        var minOpacity=50;\r\n        this.node.opacity=minOpacity+Math.floor(opacityRatio*(255-minOpacity));\r\n\r\n        if(this.getPlayerDistance()<this.pickRadius){\r\n            this.onPick();\r\n            return;\r\n        }\r\n    },\r\n});\r\n"]}